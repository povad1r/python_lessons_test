import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN
from steps import TrafficLights, Flow
from keyboards import lightsall, yellowkb, greenkb, traffic_off_kb, request_contact

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands='start')
async def start_process(message: types.Message):
    await message.answer('–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç - —ñ–∑ –º–∞—à–∏–Ω–∞–º–∏ —Å—Ç–∞–Ω—ñ–≤. –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó - –ø–æ—à–∏—Ä —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç.',
                         reply_markup=request_contact)


@dp.message_handler(commands='start', state=Flow.RegisterState)
async def start_process(message: types.Message):
    await message.answer('–í–∏ —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!')


@dp.message_handler(content_types=types.ContentTypes.CONTACT)
async def registration(message: types.Message):
    if message.from_id != message.contact.user_id:
        await message.answer('–í–∏ –Ω–∞–¥–∞–ª–∏ —á—É–∂–∏–π –∫–æ–Ω—Ç–∞–∫—Ç')
    else:
        full_name = message.contact.full_name
        phone = message.contact.phone_number
        await Flow.RegisterState.set()
        await message.answer(f'{full_name}, –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è\n–í–∞—à –Ω–æ–º–µ—Ä - {phone}')


@dp.message_handler(content_types='text', state=Flow.RegisterState)
async def get_name(message: types.Message):
    await Flow.RegisterState.set()
    await message.answer(f'{message.text}, –¥—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!')


@dp.message_handler(commands='traffic_light_on', state='*')
async def traffic_light_on(message: types.Message):
    await TrafficLights.StateOn.set()
    await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Äüö¶\n'
                         '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –±—É–¥—å-—è–∫–µ —Å–≤—ñ—Ç–ª–æ:',
                         reply_markup=lightsall)


@dp.message_handler(text='–ß–µ—Ä–≤–æ–Ω–∏–πüî¥', state=TrafficLights.StateOn)
async def traffic_red(message: types.Message):
    await TrafficLights.StateRed.set()
    await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ —á–µ—Ä–≤–æ–Ω–µ —Å–≤—ñ—Ç–ª–æüî¥\n'
                         '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∂–æ–≤—Ç–µ:',
                         reply_markup=yellowkb)


@dp.message_handler(text='–ñ–æ–≤—Ç–∏–πüü°', state=TrafficLights.StateRed)
async def traffic_yellow(message: types.Message):
    await TrafficLights.StateYellow.set()
    await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ –∂–æ–≤—Ç–µ —Å–≤—ñ—Ç–ª–æüü°\n'
                         '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–µ–ª–µ–Ω–µ:',
                         reply_markup=greenkb)


@dp.message_handler(text='–ó–µ–ª–µ–Ω–∏–πüü¢', state=TrafficLights.StateYellow)
async def traffic_green(message: types.Message):
    await TrafficLights.StateGreen.set()
    await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ –∑–µ–ª–µ–Ω–µ —Å–≤—ñ—Ç–ª–æüü¢\n'
                         '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–º–∫–Ω—É—Ç–∏ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä:',
                         reply_markup=traffic_off_kb)


@dp.message_handler(text='–í–∏–º–∫–Ω—É—Ç–∏', state=TrafficLights.StateGreen)
async def traffic_off(message: types.Message):
    await TrafficLights.StateOff.set()
    await message.answer('–í–∏ –≤–∏–º–∫–Ω—É–ª–∏ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä.\n'
                         '–©–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏ - /traffic_light_on')


if __name__ == '__main__':
    executor.start_polling(dp)
